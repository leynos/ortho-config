use ortho_config::OrthoConfig;
use serde::Deserialize;

#[allow(dead_code)]
#[derive(Deserialize, OrthoConfig)]
struct TestConfig {
    sample_value: String,
}

// Access the hidden clap struct generated by the derive macro.
#[allow(non_camel_case_types)]
type TestConfigCli = __TestConfigCli;

#[test]
fn parses_kebab_case_flags() {
    use clap::Parser;
    let cli = TestConfigCli::parse_from(["prog", "--sample-value", "hello"]);
    assert_eq!(cli.sample_value.as_deref(), Some("hello"));
}

#[test]
fn merges_cli_into_figment() {
    use clap::Parser;
    use figment::{Figment, providers::Serialized};

    let cli = TestConfigCli::parse_from(["prog", "--sample-value", "world"]);

    let cfg: TestConfig = Figment::new()
        .merge(Serialized::defaults(cli))
        .extract()
        .expect("figment extraction");

    assert_eq!(cfg.sample_value, "world");
}
